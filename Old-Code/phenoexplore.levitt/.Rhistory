information.gain(df[,ncol(df)],df[,2])
?list
source('~/RStudio/split.R')
source('~/RStudio/split.R')
source('~/RStudio/split.R')
split.Y(df[,ncol(df)],df[,2])
source('~/RStudio/split.R')
split.Y(df[,ncol(df)],df[,2])
source('~/RStudio/split.R')
split.Y(df[,ncol(df)],df[,2])
print(df[,2])
source('~/RStudio/split.R')
split.Y(df[,ncol(df)],df[,2])
?append
source('~/RStudio/split.R')
?append
split.Y(df[,ncol(df)],df[,2])
source('~/RStudio/split.R')
source('~/RStudio/split.R')
split.Y(df[,ncol(df)],df[,2])
source('~/RStudio/split.R')
split.Y(df[,ncol(df)],df[,2])
source('~/RStudio/split.R')
split.Y(df[,ncol(df)],df[,2])
source('~/RStudio/split.R')
split.Y(df[,ncol(df)],df[,2])
source('~/RStudio/split.R')
source('~/RStudio/split.R')
source('~/RStudio/split.R')
source('~/RStudio/split.R')
source('~/RStudio/split.R')
split.Y(df[,ncol(df)],df[,2])
source('~/RStudio/split.R')
split.Y(df[,ncol(df)],df[,2])
source('~/RStudio/split.R')
split.Y(df[,ncol(df)],df[,2])
source('~/RStudio/split.R')
source('~/RStudio/split.R')
split.Y(df[,ncol(df)],df[,2])
source('~/RStudio/split.R')
split.Y(df[,ncol(df)],df[,2])
source('~/RStudio/split.R')
source('~/RStudio/split.R')
source('~/RStudio/split.R')
split.Y(df[,ncol(df)],df[,2])
split.Y(df[,ncol(df)],df[,2])
source('~/RStudio/split.R')
split.Y(df[,ncol(df)],df[,2])
source('~/RStudio/split.R')
split.Y(df[,ncol(df)],df[,2])
source('~/.active-rstudio-document')
split.Y(df[,ncol(df)],df[,2])
source('~/RStudio/split.R')
source('~/RStudio/split.R')
df[,1:ncol(df)-1]
source('~/RStudio/split.optimal.R')
split.optimal(df[,ncol(df)],df[,1:ncol(df)-1])
source('~/RStudio/split.optimal.R')
split.optimal(df[,ncol(df)],df[,1:ncol(df)-1])
source('~/RStudio/split.optimal.R')
split.optimal(df[,ncol(df)],df[,1:ncol(df)-1])
source('~/RStudio/split.optimal.R')
source('~/RStudio/split.optimal.R')
split.optimal(df[,ncol(df)],df[,1:ncol(df)-1])
source('~/RStudio/split.optimal.R')
split.optimal(df[,ncol(df)],df[,1:ncol(df)-1])
split.optimal(df[,ncol(df)],df[,1:ncol(df)-1])
source('~/RStudio/split.optimal.R')
split.optimal(df[,ncol(df)],df[,1:ncol(df)-1])
split.optimal(df[,ncol(df)],df[,1:ncol(df)-1])
conditional.entropy(df,df[1])
conditional.entropy(df,df[2])
conditional.entropy(df,df[3])
conditional.entropy(df[,ncol(df)],df[,1])
conditional.entropy(df[,ncol(df)],df[,2])
conditional.entropy(df[,ncol(df)],df[,3])
conditional.entropy(df[,ncol(df)],df[,4])
split.optimal(df[,ncol(df)],df[,1:ncol(df)-1])
split.optimal(df[,ncol(df)],df[,1:ncol(df)-1])
source('~/RStudio/split.optimal.R')
source('~/RStudio/split.optimal.R')
source('~/RStudio/split.optimal.R')
source('~/RStudio/split.optimal.R')
split.optimal(df[,ncol(df)],df[,1:ncol(df)-1])
source('~/RStudio/split.optimal.R')
split.optimal(df[,ncol(df)],df[,1:ncol(df)-1])
sample1 = df[2,1:ncol(df)-1]
sample1
iris
sample2 = df[8,1:ncol(df)-1]
sample2
sample1
df = iris
df
sample2 = df[8,1:ncol(df)-1]
sample1 = df[2,1:ncol(df)-1]
sample1
print(distance(sample1,sample2))
source('~/RStudio/distance.R')
print(distance(sample1,sample2))
df = df(header=F)
df.header
header(df)
head(df)
testdf = read.csv('iris.data',header=F)
iris.data <- read.csv("/var/folders/5b/7lykmh8n1xjdbg4jnwmyz9sm0000gp/T//Rtmp7D8ItV/data60fd3f43047f", header=F)
View(iris.data)
iris.data
df = iris.data
print(distance(sample1,sample2))
sample1
dist(rbind(sample1,sample2))
dist(sample1,sample2)
distance(sample1,sample2)
means = df[1:3,1:ncol(df)-1]
means
sample = df[30,1:ncol(df)-1]
sample
source('~/RStudio/assign.group.R')
source('~/RStudio/assign.group.R')
print(assign.group(means,sample))
source('~/RStudio/assign.group.R')
print(assign.group(means,sample))
source('~/RStudio/distance.R')
distance(sample1,sample2)
source('~/RStudio/assign.groups.R')
source('~/RStudio/assign.groups.R')
means
sample
assign.group(means,sample)
assign.group(means,sample)
sample1
sample2
sample1-sample2
(sample1-sample2)^2
sum((sample1-sample2)^2)
source('~/RStudio/distance.R')
distance(sample1,sample2)
assign.group(means,sample)
assign.group(means,sample)
means
means[1]
source('~/RStudio/assign.group.R')
assign.group(means,sample)
source('~/RStudio/assign.group.R')
assign.group(means,sample)
source('~/RStudio/assign.group.R')
assign.group(means,sample)
source('~/RStudio/assign.groups.R')
means
samples
samples = df[1:30,1:ncol(df)-1]
samples
print(assign.groups(means,samples))
print(assign.groups(means,samples))
assign.group(means,sample1)
assign.group(means,sample2)
means
assign.group(means,c(5.1,3.5,1.3,0.2))
assign.group(means, c(5.1,3.5,1.4,0.2))
source('~/RStudio/dist.R')
source('~/RStudio/assign.group.R')
assign.group(means, c(5.1,3.5,1.4,0.2))
dist(sample1,sample2)
source('~/RStudio/distance.R')
assign.group(means, c(5.1,3.5,1.4,0.2))
source('~/RStudio/assign.group.R')
assign.group(means, c(5.1,3.5,1.4,0.2))
source('~/RStudio/assign.group.R')
assign.group(means, c(5.1,3.5,1.4,0.2))
source('~/RStudio/assign.group.R')
assign.group(means, c(5.1,3.5,1.4,0.2))
source('~/RStudio/assign.group.R')
assign.group(means, c(5.1,3.5,1.4,0.2))
source('~/RStudio/assign.group.R')
assign.group(means, c(5.1,3.5,1.4,0.2))
source('~/RStudio/assign.group.R')
assign.group(means, c(5.1,3.5,1.4,0.2))
source('~/RStudio/assign.group.R')
source('~/RStudio/distance.R')
source('~/RStudio/calculate.means.R')
print(assign.group(means,sample))
source('~/RStudio/assign.group.R')
means = df[1:3,1:ncol(df)-1]
sample = df[30,1:ncol(df)-1]
print(assign.group(means,sample))
source('~/RStudio/distance.R')
print(assign.groups(means,samples))
samples[1]
source('~/RStudio/assign.groups.R')
print(assign.groups(means,samples))
source('~/RStudio/distance.R')
print(assign.groups(means,samples))
source('~/RStudio/calculate.means.R')
?mean
source('~/RStudio/calculate.means.R')
means = df[1:3,1:ncol(df)-1]
samples = df[1:30,1:ncol(df)-1]
ag = assign.groups(means,samples)
ag
calculate.means(samples,ag)
source('~/RStudio/calculate.means.R')
samples
groups
ag
source('~/RStudio/calculate.means.R')
calculate.means(samples,ag)
calculate.means(samples,ag)
calculate.means(samples,ag)
calculate.means(samples,ag)
source('~/RStudio/calculate.means.R')
calculate.means(samples,ag)
source('~/RStudio/calculate.means.R')
calculate.means(samples,ag)
source('~/RStudio/calculate.means.R')
calculate.means(samples,ag)
samples[1]
source('~/RStudio/calculate.means.R')
calculate.means(samples,ag)
source('~/RStudio/calculate.means.R')
calculate.means(samples,ag)
source('~/RStudio/calculate.means.R')
calculate.means(samples,ag)
source('~/RStudio/calculate.means.R')
calculate.means(samples,ag)
source('~/RStudio/calculate.means.R')
calculate.means(samples,ag)
source('~/RStudio/calculate.means.R')
calculate.means(samples,ag)
source('~/RStudio/calculate.means.R')
calculate.means(samples,ag)
source('~/RStudio/calculate.means.R')
calculate.means(samples,ag)
source('~/RStudio/distance.R')
calculate.means(samples,ag)
source('~/RStudio/calculate.means.R')
source('~/RStudio/kmeans.R')
means = df[1:3,1:ncol(df)-1]
samples = df[,1:ncol(df)-1]
means
samples
print(kmeans(samples,means))
?compare
??compare
?==
source('~/RStudio/kmeans.R')
kmeans(samples,means)
source('~/RStudio/kmeans.R')
kmeans(samples,means)
source('~/RStudio/kmeans.R')
kmeans(samples,means)
source('~/RStudio/kmeans.R')
source('~/RStudio/kmeans.R')
kmeans(samples,means)
source('~/RStudio/kmeans.R')
kmeans(samples,means)
??equals
identical(sample1,sample2)
s1 = c(1,2,3)
s2 = c(1,2,3)
identical(s1,s2)
source('~/RStudio/kmeans.R')
kmeans(samples,means)
source('~/RStudio/kmeans.R')
kmeans(samples,means)
iris
kmeans(samples,means)
source('~/RStudio/kmeans.R')
source('~/RStudio/kmeans.R')
kmeans(samples,means)
source('~/RStudio/kmeans.R')
source('~/RStudio/calculate.means.R')
source('~/RStudio/kmeans.R')
distance
df
samples1 = df[1:3,1:ncol(df)-1]
samples2 = df[10:30,1:ncol(df)-1]
samples1
samples2
print(upgma(samples1,samples2))
source('~/RStudio/upgma.R')
print(upgma(samples1,samples2))
print(upgma(samples1,samples2))
print(upgma(samples2,samples1))
print(upgma(samples1,samples2))
print(upgma(samples2,samples1))
distance
source('~/RStudio/upgma.R')
source('~/RStudio/upgma.R')
print(upgma(samples1,samples2))
source('~/RStudio/upgma.R')
source('~/RStudio/upgma.R')
groups = list(df[1:3,1:ncol(df)-1],df[4:10,1:ncol(df)-1],df[30:40,1:ncol(df)-1])
groups
source('~/RStudio/select.two.R')
select.two(groups)
source('~/RStudio/select.two.R')
source('~/RStudio/select.two.R')
source('~/RStudio/select.two.R')
select.two(groups)
source('~/RStudio/select.two.R')
select.two(groups)
groups[i]
groups[1]
nrow(groups[1])
nrow(groups[[1]])
source('~/RStudio/select.two.R')
source('~/RStudio/select.two.R')
select.two(groups)
source('~/RStudio/select.two.R')
source('~/RStudio/select.two.R')
select.two(groups)
source('~/RStudio/select.two.R')
select.two(groups)
source('~/RStudio/select.two.R')
select.two(groups)
groups
samples = df[1:10,1:ncol(df)-1]
samples
hierarchical.cluster(samples,0.5)
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
?append
?rappend
??append
?lappend
?rbind
?append
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/hierarchical.cluster.R')
source('~/RStudio/hierarchical.cluster.R')
source('~/RStudio/hierarchical.cluster.R')
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
?rbind
rbind(groups[[1]],groups[[2]])
groups[[1]]
groups[[2]]
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/hierarchical.cluster.R')
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/hierarchical.cluster.R')
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/select.two.R')
source('~/RStudio/hierarchical.cluster.R')
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/select.two.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/select.two.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/hierarchical.cluster.R')
source('~/RStudio/hierarchical.cluster.R')
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,0.5)
print(hierarchical.cluster(samples,Inf))
hierarchical.cluster(samples,0.1)
hierarchical.cluster(samples,2)
hierarchical.cluster(samples,1)
hierarchical.cluster(samples,2)
source('~/RStudio/hierarchical.cluster.R')
hierarchical.cluster(samples,2)
version
version
install.packages("arcdiagram-master.zip")
ls -l /Library/Frameworks/R.framework/Versions/
ls -l /Library/Frameworks/R.framework/Versions
hierarchical.cluster(samples,0.5)
install.packages("arcdiagram-master.zip")
getwd()
?igraph
??igraph
igraph
install.packages("igraph")
version
top250 = read.csv("gephiTest.csv")
setwd("~/Desktop/C2G2")
top250 = read.csv("gephiTest.csv")
top250 = top250[1:2]
top250
graph.adjacency(top250)
library(igraph)
graph.adjacency(top250)
g <- read.graph("top250", format="ncol", direted=TRUE, weight=TRUE)
graph.adjacency(top250, format="ncol")
read.graph()
read.graph
g <- read.graph("top250", format=c("ncol"))
top250 = as.matrix(top250)
top250
g <- read.graph("top250", format=c("ncol"))
graph.adjacency(top250)
g <- erad.graph("top250", format="ncol"
)
graph(top250)
top250 = read.csv("gephiTest.csv")
top250
top1000net
netowkr
library(network)
top1000net
library(GGally)
library(sna)
library(egrm)
library(ergm)
library(ergm)
library(ggplot2)
ggnet(top1000net)
clear
clear
getwd()
splicing = read.csv("subset.splicing.data.csv")
splicing
head(splicing)
splicing = splicing[1:20]
splicing
head(splicing)
splicing = read.csv("subset.splicing.data.csv")
splicing = splicing[1:21]
head(splicing)
splicing = t(splicing)
head(splicing)
splicing = read.csv("subset.splicing.data.csv")
splicing = splicing[1:21]
t(splicing)
head(t(splicing))
splicing
head(splicing)
as.matrix(splicing)
as.matrix(head(splicing)
)
t(as.matrix(splicing))
head(t(as.matrix(splicing)))
top1000
View(splicing)
t(splicing)
t(splicing[3,3])
write.csv(t(splicing), file="testt.csv")
splicing = read.csv("testt.csv")
View(splicing)
splicing
head(splicing)
colnames(splicing) = NULL
head(splicing)
cnames = read.csv("subset.splicing.data.csv")
cnames = cnames[22]
cnames
cnames = read.csv("subset.splicing.data.csv")
cnames = cnames[23]
cnames
t(cnames)
testnames = t(cnames)
colnames(splicing) = testnames
splicing
View(samples2)
View(splicing)
setwd("~/")
View(top1000)
View(splicing)
?split
t(splicing)
split(t(splicing),splicing$genename)
load("~/Desktop/C2G2/.RData")
pairSVM(tgenes, tenPairs)
libraru(e1071)
library(e1071)
source('~/Desktop/C2G2/pairSVM.R')
pairSVM(tgenes, tenPairs)
pairSVM(tgenes, tenPairs)
source('~/Desktop/C2G2/pairSVM.R')
pairSVM(tgenes, tenPairs)
pairSVM(tgenes, thousandPairs[1:20,])
thousandPairs[1:20,]
tenPairs
pairSVM(tgenes, as.matrix(thousandPairs[1:20,]))
?dim()
?nrow()
library(shiny)
setwd("~/Desktop/Work_Unpak/unpak-shiny")
runApp('phenoexplore.levitt/')
